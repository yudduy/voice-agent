/**
 * VOICE PIPELINE ENVIRONMENT SETUP
 * 
 * This script helps set up the environment variables needed for the complete voice pipeline
 */
require('dotenv').config();
const fs = require('fs');
const path = require('path');

const ENV_FILE = path.join(__dirname, '.env');

function readCurrentEnv() {
  if (!fs.existsSync(ENV_FILE)) {
    return {};
  }
  
  const envContent = fs.readFileSync(ENV_FILE, 'utf8');
  const envVars = {};
  
  envContent.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        envVars[key] = valueParts.join('=').replace(/^["']|["']$/g, '');
      }
    }
  });
  
  return envVars;
}

function generateEnvContent(currentEnv) {
  return `# VERIES Voice Pipeline Configuration
# Generated by setup-voice-env.js
# 
# This configuration enables:
# - ElevenLabs TTS for high-quality speech synthesis
# - Groq STT for accurate speech recognition
# - Call recording for STT processing
# - Twilio as the telephony provider
# - OpenAI GPT-4 for conversation intelligence

# ==============================================
# PRIMARY VOICE PROVIDERS
# ==============================================

# ElevenLabs TTS (Primary Text-to-Speech)
ELEVENLABS_API_KEY=${currentEnv.ELEVENLABS_API_KEY || 'your_elevenlabs_api_key_here'}
ELEVENLABS_VOICE_ID=${currentEnv.ELEVENLABS_VOICE_ID || 'CVaETsBZDQpSDsq9bJkl'}
TTS_PREFERENCE=elevenlabs

# Groq STT (Primary Speech-to-Text)
GROQ_API_KEY=${currentEnv.GROQ_API_KEY || 'your_groq_api_key_here'}
GROQ_WHISPER_MODEL=whisper-large-v3
SPEECH_RECOGNITION_PREFERENCE=groq
ENABLE_GROQ_TRANSCRIPTION=true
ENABLE_RECORDING=true

# ==============================================
# CORE SERVICES
# ==============================================

# Twilio (Telephony Provider)
TWILIO_ACCOUNT_SID=${currentEnv.TWILIO_ACCOUNT_SID || 'your_twilio_account_sid'}
TWILIO_AUTH_TOKEN=${currentEnv.TWILIO_AUTH_TOKEN || 'your_twilio_auth_token'}
TWILIO_PHONE_NUMBER=${currentEnv.TWILIO_PHONE_NUMBER || '+1XXXXXXXXXX'}

# OpenAI (Conversation AI)
OPENAI_API_KEY=${currentEnv.OPENAI_API_KEY || 'your_openai_api_key'}
OPENAI_MODEL=gpt-4
AI_TEMPERATURE=0.3
AI_MAX_TOKENS=200

# ==============================================
# DATABASE & CACHE
# ==============================================

# Supabase (Database)
SUPABASE_URL=${currentEnv.SUPABASE_URL || 'your_supabase_url'}
SUPABASE_ANON_KEY=${currentEnv.SUPABASE_ANON_KEY || 'your_supabase_anon_key'}
SUPABASE_SERVICE_ROLE_KEY=${currentEnv.SUPABASE_SERVICE_ROLE_KEY || 'your_supabase_service_role_key'}

# Upstash Redis (Cache)
UPSTASH_REDIS_REST_URL=${currentEnv.UPSTASH_REDIS_REST_URL || 'your_redis_url'}
UPSTASH_REDIS_REST_TOKEN=${currentEnv.UPSTASH_REDIS_REST_TOKEN || 'your_redis_token'}

# ==============================================
# WEBHOOKS & URLS
# ==============================================

# Webhook Configuration (Update with your ngrok URL)
WEBHOOK_BASE_URL=${currentEnv.WEBHOOK_BASE_URL || 'https://your-ngrok-url.ngrok-free.app'}
BASE_URL=${currentEnv.BASE_URL || 'http://localhost:3000'}

# ==============================================
# TESTING & DEVELOPMENT
# ==============================================

# Test Configuration
TEST_PHONE=${currentEnv.TEST_PHONE || '+19713364433'}
NODE_ENV=${currentEnv.NODE_ENV || 'development'}
PORT=${currentEnv.PORT || '3000'}

# ==============================================
# OPTIONAL PROVIDERS (Fallbacks)
# ==============================================

# Hyperbolic TTS (Fallback - Optional)
${currentEnv.HYPERBOLIC_API_KEY ? `HYPERBOLIC_API_KEY=${currentEnv.HYPERBOLIC_API_KEY}` : '# HYPERBOLIC_API_KEY=your_hyperbolic_api_key_optional'}

# ==============================================
# VOICE PIPELINE STATUS
# ==============================================
# ‚úÖ ElevenLabs TTS: High-quality speech synthesis
# ‚úÖ Groq STT: Accurate speech recognition with recording
# ‚úÖ Twilio: Telephony provider with webhooks
# ‚úÖ OpenAI GPT-4: Conversation intelligence
# ‚úÖ Fallback chain: ElevenLabs ‚Üí Hyperbolic ‚Üí Twilio TTS
# ‚úÖ STT chain: Groq ‚Üí Twilio STT

`;
}

function checkMissingRequired(currentEnv) {
  const missing = [];
  const criticalKeys = [
    'ELEVENLABS_API_KEY',
    'GROQ_API_KEY', 
    'TWILIO_ACCOUNT_SID',
    'TWILIO_AUTH_TOKEN',
    'TWILIO_PHONE_NUMBER',
    'OPENAI_API_KEY',
    'SUPABASE_URL',
    'SUPABASE_ANON_KEY',
    'SUPABASE_SERVICE_ROLE_KEY',
    'UPSTASH_REDIS_REST_URL',
    'UPSTASH_REDIS_REST_TOKEN'
  ];
  
  criticalKeys.forEach(key => {
    if (!currentEnv[key] || currentEnv[key].includes('your_') || currentEnv[key].includes('XXXXXXXXXX')) {
      missing.push(key);
    }
  });
  
  return missing;
}

function main() {
  console.log('üîß VERIES Voice Pipeline Environment Setup');
  console.log('='.repeat(50));
  
  const currentEnv = readCurrentEnv();
  const newContent = generateEnvContent(currentEnv);
  
  // Backup existing .env if it exists
  if (fs.existsSync(ENV_FILE)) {
    const backupFile = `${ENV_FILE}.backup.${Date.now()}`;
    fs.copyFileSync(ENV_FILE, backupFile);
    console.log(`üìã Backed up existing .env to: ${path.basename(backupFile)}`);
  }
  
  // Write new .env file
  fs.writeFileSync(ENV_FILE, newContent);
  console.log('‚úÖ Generated new .env file with voice pipeline configuration');
  
  // Check for missing required values
  const missing = checkMissingRequired(currentEnv);
  
  if (missing.length > 0) {
    console.log('\n‚ö†Ô∏è  REQUIRED VALUES MISSING:');
    console.log('Please edit your .env file and replace the following placeholders:');
    missing.forEach(key => {
      console.log(`   - ${key}`);
    });
    
    console.log('\nüí° HOW TO GET API KEYS:');
    console.log('‚Ä¢ ElevenLabs: https://elevenlabs.io/app/settings/api-keys');
    console.log('‚Ä¢ Groq: https://console.groq.com/keys');
    console.log('‚Ä¢ Twilio: https://console.twilio.com/');
    console.log('‚Ä¢ OpenAI: https://platform.openai.com/api-keys');
    console.log('‚Ä¢ Supabase: https://supabase.com/dashboard/project/your-project/settings/api');
    console.log('‚Ä¢ Upstash Redis: https://console.upstash.com/');
    
    console.log('\nüìù NEXT STEPS:');
    console.log('1. Edit .env file with your actual API keys');
    console.log('2. Update WEBHOOK_BASE_URL with your ngrok URL');
    console.log('3. Run: node debug-voice.js');
    console.log('4. If all tests pass, run: node tests/test-voice-call.js');
  } else {
    console.log('\nüéâ All required environment variables are set!');
    console.log('Run: node debug-voice.js to test your configuration');
  }
  
  console.log(`\nüìÑ Environment file location: ${ENV_FILE}`);
}

if (require.main === module) {
  main();
}

module.exports = { main }; 